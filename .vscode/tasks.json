{
        // See https://go.microsoft.com/fwlink/?LinkId=733558
        // for the documentation about the tasks.json format
        "version": "2.0.0",
        "tasks": [
            {
                "label": "sim: start simulation of 1# UAV",
                "detail": "Start Simulation in Gazebo, Depth Processing and Launch SITL and MAVROS for 1 UAV.",
                "dependsOn": [
                    "gazebo_ros (1 UAV)",
                    "camera: depth_image_proc",
                    "SITL UAV#0",
                    "mavros launch"
                ],
                "problemMatcher": []
            },
            {
                "label": "sim: start simulation of 4# UAV",
                "detail": "Start Simulation in Gazebo and Launch SITL and QGC for 4 UAV.",
                "dependsOn": [
                    "gazebo_ros (4 UAV)",
                    "SITL UAV#0",
                    "SITL UAV#1",
                    "SITL UAV#2",
                    "SITL UAV#3"
                ],
                "problemMatcher": []
            },
            {
                "label": "SITL UAV#0",
                "type": "shell",
                "command": "ThirdParty/ardupilot/Tools/autotest/sim_vehicle.py -v ArduCopter -f gazebo-uav0 --console -I0 --out=tcpin:0.0.0.0:8100",
                "problemMatcher": []
            },
            {
                "label": "SITL UAV#1",
                "type": "shell",
                "command": "ThirdParty/ardupilot/Tools/autotest/sim_vehicle.py -v ArduCopter --console -I1 --out=tcpin:0.0.0.0:8200",
                "problemMatcher": []
            },
            {
                "label": "SITL UAV#2",
                "type": "shell",
                "command": "ThirdParty/ardupilot/Tools/autotest/sim_vehicle.py -v ArduCopter --console -I2 --out=tcpin:0.0.0.0:8300",
                "problemMatcher": []
            },
            {
                "label": "SITL UAV#3",
                "type": "shell",
                "command": "ThirdParty/ardupilot/Tools/autotest/sim_vehicle.py -v ArduCopter --console -I3 --out=tcpin:0.0.0.0:8400",
                "problemMatcher": []
            },
            {
                "label": "sim: Iris Testing",
                "detail": "Start Simulation in Gazebo and Launch SITL and QGC.",
                "dependsOn": [
                    "gazebo_ros iris_testing",
                    "SITL for Gazebo",
                    "mavros launch"
                ],
                "problemMatcher": []
            },
            {
                "label": "smq: SITL, MAVROS, QGC",
                "detail": "Start your own gazebo sim then launch SITL, MAVROS and QGC.",
                "dependsOn": [
                    "SITL for Gazebo",
                    "mavros launch",
                    "QGC"
                ],
                "problemMatcher": []
            },
            {
                "label": "SITL Only",
                "detail": "Start Simulation In The Loop software.",
                "type": "shell",
                "command": "ThirdParty/ardupilot/Tools/autotest/sim_vehicle.py -v ArduCopter --console",
                "problemMatcher": []
            },
            {
                "label": "SITL for Gazebo",
                "detail": "Start SITL for gazebo sim.",
                "type": "shell",
                "command": "ThirdParty/ardupilot/Tools/autotest/sim_vehicle.py -v ArduCopter -f gazebo-iris --console",
                "problemMatcher": []
            },
            {
                "label": "Gazebo runway world without ROS",
                "detail": "Start gazebo simulation with iris arudcopter runway world.",
                "type": "shell",
                "options": {
                    "env": {
                        "GAZEBO_MODEL_PATH": "ThirdParty/ardupilot_gazebo/models"
                    }
                },
                "command": "gazebo --verbose ThirdParty/ardupilot_gazebo/worlds/iris_arducopter_runway.world",
                "dependsOn": [
                    "build"
                ],
                "problemMatcher": []
            },
            {
                "label": "QGC",
                "detail": "Start QGroundControl.",
                "type": "shell",
                "command": "./ThirdParty/QGroundControl.AppImage",
                "problemMatcher": []
            },
            {
                "label": "build",
                "detail": "Build workspace (default)",
                "type": "shell",
                "command": "./build.sh",
                "group": {
                    "kind": "build",
                    "isDefault": true
                },
                "problemMatcher": "$gcc"
            },
            {
                "label": "import thirdparty repos",
                "detail": "Use vcs to import modules specified by a workspace/rosinstall file.",
                "type": "shell",
                "command": "vcs import < ThirdParty/thirdparty.repos ThirdParty",
                "problemMatcher": []
            },
            {
                "label": "update workspace file",
                "detail": "Use vcs to update repositories in src to workspace file.",
                "type": "shell",
                "command": "vcs export src > ThirdParty/repos",
                "problemMatcher": []
            },
            {
                "label": "install dependencies",
                "detail": "Install all dependencies specified in the workspaces package.xml files.",
                "type": "shell",
                "command": "sudo apt-get update && rosdep update && rosdep install --from-paths src --ignore-src -y",
                "problemMatcher": []
            },
            {
                "label": "setup",
                "detail": "Set up the workspace",
                "type": "shell",
                "command": "./setup_environment.sh",
                "problemMatcher": []
            },
            {
                "label": "add submodules from .repos",
                "detail": "Create a git submodule for all repositories in your .repos file",
                "type": "shell",
                "command": "python3 .devcontainer/repos_to_submodules.py",
                "problemMatcher": []
            },
            {
                "type": "ros",
                "command": "roslaunch",
                "args": [
                    "ego_planner",
                    "rviz.launch"
                ],
                "options": {
                    "env": {
                        "LIBGL_ALWAYS_SOFTWARE": "1"
                    }
                },
                "problemMatcher": [
                    "$roslaunch"
                ],
                "label": "rviz: visualize ego_planner"
            },
            {
                "type": "ros",
                "command": "roslaunch",
                "args": [
                    "iris_planner",
                    "rviz.launch"
                ],
                "problemMatcher": [
                    "$roslaunch"
                ],
                "label": "iris: start rviz"
            },
            {
                "type": "ros",
                "command": "roslaunch",
                "args": [
                    "iris_description",
                    "view_robot.launch"
                ],
                "options": {
                    "env": {
                        "LIBGL_ALWAYS_SOFTWARE": "1"
                    }
                },
                "problemMatcher": [
                    "$roslaunch"
                ],
                "label": "v: view iris robot description",
                "detail": "Start rviz to visualize iris robot description"
            },
            {
                "type": "ros",
                "command": "roslaunch",
                "args": [
                    "iris_vision",
                    "depth_image_proc.launch",
                    "ns:=/uav0",
                    "--wait"
                ],
                "problemMatcher": [
                    "$roslaunch"
                ],
                "label": "camera: depth_image_proc"
            },
            {
                "type": "ros",
                "command": "roslaunch",
                "args": [
                    "iris_planner",
                    "ego_planner.launch"
                ],
                "problemMatcher": [
                    "$roslaunch"
                ],
                "label": "iris: ego_planner"
            },
            {
                "type": "ros",
                "command": "roslaunch",
                "args": [
                    "iris_gazebo",
                    "sim.launch",
                    "num_uavs:=1"
                ],
                "options": {
                    "env": {
                        "GAZEBO_MODEL_PATH": "ThirdParty/ardupilot_gazebo/models"
                    }
                },
                "problemMatcher": [
                    "$roslaunch"
                ],
                "label": "gazebo_ros (1 UAV)"
            },
            {
                "type": "ros",
                "command": "roslaunch",
                "args": [
                    "iris_gazebo",
                    "sim.launch",
                    "num_uavs:=4"
                ],
                "options": {
                    "env": {
                        "GAZEBO_MODEL_PATH": "ThirdParty/ardupilot_gazebo/models"
                    }
                },
                "problemMatcher": [
                    "$roslaunch"
                ],
                "label": "gazebo_ros (4 UAV)"
            },
            {
                "type": "ros",
                "command": "roslaunch",
                "args": [
                    "iris_gazebo",
                    "iris_testing.launch"
                ],
                "options": {
                    "env": {
                        "GAZEBO_MODEL_PATH": "ThirdParty/ardupilot_gazebo/models"
                    }
                },
                "problemMatcher": [
                    "$roslaunch"
                ],
                "label": "gazebo_ros iris_testing"
            },
            {
                "type": "ros",
                "command": "roslaunch",
                "args": [
                    "iris_mavros",
                    "apm.launch",
                    "--wait"
                ],
                "problemMatcher": [
                    "$roslaunch"
                ],
                "label": "mavros launch"
            },
            {
                "type": "ros",
                "command": "roslaunch",
                "args": [
                    "ego_planner",
                    "rviz.launch"
                ],
                "options": {
                    "env": {
                        "LIBGL_ALWAYS_SOFTWARE": "1"
                    }
                },
                "problemMatcher": [
                    "$roslaunch"
                ],
                "label": "rviz: visualize ego_planner",
                "detail": "Start rviz to visualize ego_planner"
            },
            {
                "type": "ros",
                "command": "rosrun",
                "args": [
                    "rqt_tf_tree",
                    "rqt_tf_tree"
                ],
                "problemMatcher": [
                    "$roslaunch"
                ],
                "label": "tf: view tf tree",
            }
        ],
        "inputs": [
            {
                "id": "package",
                "type": "promptString",
                "description": "Package name"
            }
        ]
    }